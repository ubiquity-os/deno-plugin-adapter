name: "Deno Deploy Plugin Adapter"
description: "Converts a plugin into a Deno-compatible deployment by creating entry points."
inputs:
  pluginEntry:
    description: "The path to the plugin entry file. It is expected to export 'fetch' as a default."
    required: false
    default: "./worker"
outputs:
  entrypoint:
    description: "The path to the generated Deno entry point file"
    value: ${{ steps.create-entry.outputs.entrypoint }}
runs:
  using: "composite"
  steps:
    - name: Create Deno Entry Point
      id: create-entry
      shell: bash
      run: |
        mkdir -p src
        cat << 'EOF' > src/deno.ts
        import worker from "${{ inputs.pluginEntry }}";
        export default {
          async fetch(request: Request, env: Record<string, unknown>, executionCtx?: ExecutionContext) {
            Object.assign(env, Deno.env.toObject());
            return worker.fetch(request, env, executionCtx);
          },
        };
        EOF
        echo "entrypoint=$(pwd)/src/deno.ts" >> $GITHUB_OUTPUT

    - name: Fix Import Extensions
      shell: bash
      run: |
        find src -name "*.ts" -type f -exec sh -c '
          sed -i.bak "
            # Add .ts extension to relative imports (but not .json ones)
            s/from \"\(\.\+[^\"]*\)\([^.]\)\"$/from \"\1\2.ts\"/g;
            s/from '"'"'\(\.\+[^'"'"']*\)\([^.]\)'"'"'$/from '"'"'\1\2.ts'"'"'/g;
            # Add with { type: \"json\" } to .json imports only if not already present
            s/from \"\(\.\+[^\"]*\)\.json\"\([^w]\|$\)/from \"\1.json\" with { type: \"json\" }\2/g;
            s/from '"'"'\(\.\+[^'"'"']*\)\.json'"'"'\([^w]\|$\)/from '"'"'\1.json'"'"' with { type: \"json\" }\2/g;
            # Fix incorrectly added extensions
            s/\.json\.ts\" with { type: \"json\" }/.json\" with { type: \"json\" }/g;
            s/\.css\.ts/.css/g;
            s/\.svg\.ts/.svg/g;
            s/\.ts\.ts/.ts/g
          " "$1"
        ' _ {} \;
        find src -name "*.ts.bak" -delete
